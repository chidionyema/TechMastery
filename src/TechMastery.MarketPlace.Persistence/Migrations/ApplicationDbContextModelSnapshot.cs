// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TechMastery.MarketPlace.Persistence;

#nullable disable

namespace TechMastery.MarketPlace.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProductProductTag", b =>
                {
                    b.Property<Guid>("ProductListingsProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsTagId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductListingsProductId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("ProductProductTag");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uuid");

                    b.HasKey("CartItemId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("60dff8dd-8efb-4b8f-94d7-e56c472c8601"),
                            CreatedDate = new DateTime(2023, 8, 21, 12, 18, 50, 639, DateTimeKind.Utc).AddTicks(9350),
                            Name = "Web"
                        },
                        new
                        {
                            CategoryId = new Guid("8efe24a1-fa4f-4a66-92f2-a9b68f274561"),
                            CreatedDate = new DateTime(2023, 8, 21, 12, 18, 50, 639, DateTimeKind.Utc).AddTicks(9370),
                            Name = "Devops"
                        },
                        new
                        {
                            CategoryId = new Guid("d6d63abf-0e58-4c3c-bb1a-946170d75ac2"),
                            CreatedDate = new DateTime(2023, 8, 21, 12, 18, 50, 639, DateTimeKind.Utc).AddTicks(9370),
                            Name = "AI"
                        });
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.CategoryDependency", b =>
                {
                    b.Property<Guid>("CategoryDependencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DependencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CategoryDependencyId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DependencyId");

                    b.ToTable("CategoryDependencies");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Contribution", b =>
                {
                    b.Property<Guid>("ContributionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContributorId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SharePercentage")
                        .HasColumnType("numeric");

                    b.HasKey("ContributionId");

                    b.HasIndex("ContributorId");

                    b.HasIndex("ProductId");

                    b.ToTable("Contributions");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Contributor", b =>
                {
                    b.Property<Guid>("ContributorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ContributorId");

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Dependency", b =>
                {
                    b.Property<Guid>("DependencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DependencyTypeEnum")
                        .HasColumnType("integer");

                    b.Property<int>("DependencyTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DependencyId");

                    b.HasIndex("DependencyTypeId");

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.DependencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DependencyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Framework"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Platform"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tool"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Language"
                        });
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuyerUsername")
                        .HasColumnType("text");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderEmail")
                        .HasColumnType("text");

                    b.Property<bool>("OrderPaid")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.OrderLineItem", b =>
                {
                    b.Property<Guid>("OrderLineItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("OrderLineItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderLineItems");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DemoURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductArtifact", b =>
                {
                    b.Property<Guid>("ProductArtifactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ArtifactType")
                        .HasColumnType("integer");

                    b.Property<string>("BlobUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DownloadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsMarkedForDeletion")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductArtifactId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductArtifacts");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductArtifactDownloadHistory", b =>
                {
                    b.Property<Guid>("ProductDownloadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DownloadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DownloadedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductArtifactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductListingId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductDownloadId");

                    b.HasIndex("ProductArtifactId");

                    b.HasIndex("ProductListingId");

                    b.ToTable("ProductDownloadHistory");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductDependency", b =>
                {
                    b.Property<Guid>("ProductDependencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DependencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductDependencyId");

                    b.HasIndex("DependencyId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDependencies");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductLicense", b =>
                {
                    b.Property<Guid>("ProductLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductLicenseId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductLicenses");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductReview", b =>
                {
                    b.Property<Guid>("ProductReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewerUsername")
                        .HasColumnType("text");

                    b.HasKey("ProductReviewId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusEnum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProductStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "NewlyListed",
                            StatusEnum = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "InReview",
                            StatusEnum = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "ReadyForSale",
                            StatusEnum = 0
                        });
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductTag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("TagId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.SaleTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId1");

                    b.ToTable("SaleTransactions");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<Guid>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ShoppingCartId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("ProductProductTag", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductListingsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.ProductTag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.ShoppingCart", null)
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Category", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.CategoryDependency", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Category", "Category")
                        .WithMany("Dependencies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Dependency", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Contribution", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Contributor", "Contributor")
                        .WithMany("Contributions")
                        .HasForeignKey("ContributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany("Contributions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contributor");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Dependency", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.DependencyType", "DependencyType")
                        .WithMany()
                        .HasForeignKey("DependencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DependencyType");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Order", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", null)
                        .WithMany("Orders")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.OrderLineItem", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Order", null)
                        .WithMany("OrderLineItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Product", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductArtifact", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", null)
                        .WithMany("Artifacts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductArtifactDownloadHistory", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.ProductArtifact", "ProductArtifact")
                        .WithMany()
                        .HasForeignKey("ProductArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "ProductListing")
                        .WithMany("Downloads")
                        .HasForeignKey("ProductListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductArtifact");

                    b.Navigation("ProductListing");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductDependency", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Dependency", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany("Dependencies")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dependency");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductLicense", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", null)
                        .WithMany("Licenses")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductReview", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.SaleTransaction", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductId1");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Category", b =>
                {
                    b.Navigation("Dependencies");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Contributor", b =>
                {
                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderLineItems");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Product", b =>
                {
                    b.Navigation("Artifacts");

                    b.Navigation("Contributions");

                    b.Navigation("Dependencies");

                    b.Navigation("Downloads");

                    b.Navigation("Licenses");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
