// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TechMastery.MarketPlace.Persistence;

#nullable disable

namespace TechMastery.MarketPlace.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230808220736_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProductProductTag", b =>
                {
                    b.Property<Guid>("ProductListingsProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsTagId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductListingsProductId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("ProductProductTag");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uuid");

                    b.HasKey("CartItemId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.CategoryDependency", b =>
                {
                    b.Property<Guid>("CategoryDependencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DependencyTypeEntityId")
                        .HasColumnType("integer");

                    b.Property<int?>("DependencyTypeEnum")
                        .HasColumnType("integer");

                    b.Property<int>("DependencyTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("CategoryDependencyId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DependencyTypeEntityId");

                    b.ToTable("CategoryDependencies");

                    b.HasData(
                        new
                        {
                            CategoryDependencyId = new Guid("2542448f-0ae3-4721-95b3-6fecd04798e6"),
                            CategoryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2023, 8, 8, 22, 7, 36, 747, DateTimeKind.Utc).AddTicks(150),
                            DependencyTypeEnum = 0,
                            DependencyTypeId = 0,
                            Name = "React",
                            Version = "17.0.2"
                        },
                        new
                        {
                            CategoryDependencyId = new Guid("f79acbb2-30fd-43d5-8360-2397af3fcfd2"),
                            CategoryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2023, 8, 8, 22, 7, 36, 747, DateTimeKind.Utc).AddTicks(160),
                            DependencyTypeEnum = 0,
                            DependencyTypeId = 0,
                            Name = "Angular",
                            Version = "12.0.3"
                        },
                        new
                        {
                            CategoryDependencyId = new Guid("691eea92-3e05-4236-ae5b-bce3c91c8aa5"),
                            CategoryId = new Guid("00000001-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2023, 8, 8, 22, 7, 36, 747, DateTimeKind.Utc).AddTicks(160),
                            DependencyTypeEnum = 0,
                            DependencyTypeId = 0,
                            Name = ".NET Core",
                            Version = "6.0"
                        },
                        new
                        {
                            CategoryDependencyId = new Guid("d427d457-6f6f-4b23-b447-c4f463457ae7"),
                            CategoryId = new Guid("00000001-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2023, 8, 8, 22, 7, 36, 747, DateTimeKind.Utc).AddTicks(160),
                            DependencyTypeEnum = 0,
                            DependencyTypeId = 0,
                            Name = "Node.js",
                            Version = "14.17.6"
                        },
                        new
                        {
                            CategoryDependencyId = new Guid("e5237040-b261-43d9-927e-e4e85b9aa0d0"),
                            CategoryId = new Guid("00000001-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2023, 8, 8, 22, 7, 36, 747, DateTimeKind.Utc).AddTicks(170),
                            DependencyTypeEnum = 2,
                            DependencyTypeId = 0,
                            Name = "Docker",
                            Version = "20.10.8"
                        },
                        new
                        {
                            CategoryDependencyId = new Guid("2280c0e8-3b51-400e-978d-a755feda790e"),
                            CategoryId = new Guid("00000001-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2023, 8, 8, 22, 7, 36, 747, DateTimeKind.Utc).AddTicks(170),
                            DependencyTypeEnum = 2,
                            DependencyTypeId = 0,
                            Name = "Kubernetes",
                            Version = "1.21.3"
                        },
                        new
                        {
                            CategoryDependencyId = new Guid("f6494f8f-3ff3-4ec9-bed9-5f06e0ca081b"),
                            CategoryId = new Guid("00000001-0000-0000-0000-000000000004"),
                            CreatedDate = new DateTime(2023, 8, 8, 22, 7, 36, 747, DateTimeKind.Utc).AddTicks(170),
                            DependencyTypeEnum = 2,
                            DependencyTypeId = 0,
                            Name = "PostgreSQL",
                            Version = "13.4"
                        },
                        new
                        {
                            CategoryDependencyId = new Guid("7db25e04-8362-4882-b5fd-71442a7ea3bb"),
                            CategoryId = new Guid("00000001-0000-0000-0000-000000000004"),
                            CreatedDate = new DateTime(2023, 8, 8, 22, 7, 36, 747, DateTimeKind.Utc).AddTicks(170),
                            DependencyTypeEnum = 2,
                            DependencyTypeId = 0,
                            Name = "MongoDB",
                            Version = "5.0.2"
                        },
                        new
                        {
                            CategoryDependencyId = new Guid("2b4e9bec-2698-4196-901a-e570c2c97e16"),
                            CategoryId = new Guid("00000001-0000-0000-0000-000000000005"),
                            CreatedDate = new DateTime(2023, 8, 8, 22, 7, 36, 747, DateTimeKind.Utc).AddTicks(180),
                            DependencyTypeEnum = 0,
                            DependencyTypeId = 0,
                            Name = "TensorFlow",
                            Version = "2.7.0"
                        },
                        new
                        {
                            CategoryDependencyId = new Guid("abbf55bc-6a76-4c63-ac08-64daae2d4d22"),
                            CategoryId = new Guid("00000001-0000-0000-0000-000000000005"),
                            CreatedDate = new DateTime(2023, 8, 8, 22, 7, 36, 747, DateTimeKind.Utc).AddTicks(180),
                            DependencyTypeEnum = 0,
                            DependencyTypeId = 0,
                            Name = "PyTorch",
                            Version = "1.9.1"
                        });
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.CategoryDependencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CategoryDependencyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Framework"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Platform"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tool"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Language"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Library"
                        });
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Contribution", b =>
                {
                    b.Property<Guid>("ContributionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContributorId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SharePercentage")
                        .HasColumnType("numeric");

                    b.HasKey("ContributionId");

                    b.HasIndex("ContributorId");

                    b.HasIndex("ProductId");

                    b.ToTable("Contributions");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Contributor", b =>
                {
                    b.Property<Guid>("ContributorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ContributorId");

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuyerUsername")
                        .HasColumnType("text");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderEmail")
                        .HasColumnType("text");

                    b.Property<bool>("OrderPaid")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.OrderLineItem", b =>
                {
                    b.Property<Guid>("OrderLineItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("OrderLineItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderLineItems");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DemoURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Owner");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductArtifact", b =>
                {
                    b.Property<Guid>("ProductArtifactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ArtifactType")
                        .HasColumnType("integer");

                    b.Property<string>("BlobUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DownloadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsMarkedForDeletion")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductArtifactId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductArtifacts");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductArtifactDownloadHistory", b =>
                {
                    b.Property<Guid>("ProductDownloadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DownloadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DownloadedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductArtifactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductListingId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductDownloadId");

                    b.HasIndex("ProductArtifactId");

                    b.HasIndex("ProductListingId");

                    b.ToTable("ProductDownloadHistory");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductDependency", b =>
                {
                    b.Property<Guid>("ProductDependencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DependencyTypeEnum")
                        .HasColumnType("integer");

                    b.Property<int>("DependencyTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductDependencyId");

                    b.HasIndex("DependencyTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDependencies");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductDependencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductDependencyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Framework"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Platform"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tool"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Language"
                        });
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductLicense", b =>
                {
                    b.Property<Guid>("ProductLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductLicenseId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductLicenses");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductOwner", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductOwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Email");

                    b.ToTable("ProductOwners");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductReview", b =>
                {
                    b.Property<Guid>("ProductReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewerUsername")
                        .HasColumnType("text");

                    b.HasKey("ProductReviewId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusEnum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProductStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "NewlyListed",
                            StatusEnum = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "InReview",
                            StatusEnum = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "ReadyForSale",
                            StatusEnum = 0
                        });
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductTag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("TagId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.SaleTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId1");

                    b.ToTable("SaleTransactions");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<Guid>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ShoppingCartId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("ProductProductTag", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductListingsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.ProductTag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.ShoppingCart", null)
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Category", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.CategoryDependency", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Category", "Category")
                        .WithMany("Dependencies")
                        .HasForeignKey("CategoryId");

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.CategoryDependencyType", "DependencyTypeEntity")
                        .WithMany()
                        .HasForeignKey("DependencyTypeEntityId");

                    b.Navigation("Category");

                    b.Navigation("DependencyTypeEntity");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Contribution", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Contributor", "Contributor")
                        .WithMany("Contributions")
                        .HasForeignKey("ContributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany("Contributions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contributor");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Order", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", null)
                        .WithMany("Orders")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.OrderLineItem", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Order", null)
                        .WithMany("OrderLineItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Product", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Category", "Category")
                        .WithMany("ProductListings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.ProductOwner", "ProductOwner")
                        .WithMany("OwnedProducts")
                        .HasForeignKey("Owner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ProductOwner");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductArtifact", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", null)
                        .WithMany("Artifacts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductArtifactDownloadHistory", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.ProductArtifact", "ProductArtifact")
                        .WithMany()
                        .HasForeignKey("ProductArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "ProductListing")
                        .WithMany("Downloads")
                        .HasForeignKey("ProductListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductArtifact");

                    b.Navigation("ProductListing");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductDependency", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.ProductDependencyType", "DependencyType")
                        .WithMany()
                        .HasForeignKey("DependencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany("Dependencies")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DependencyType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductLicense", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", null)
                        .WithMany("Licenses")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductReview", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.SaleTransaction", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductId1");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Category", b =>
                {
                    b.Navigation("Dependencies");

                    b.Navigation("ProductListings");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Contributor", b =>
                {
                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderLineItems");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Product", b =>
                {
                    b.Navigation("Artifacts");

                    b.Navigation("Contributions");

                    b.Navigation("Dependencies");

                    b.Navigation("Downloads");

                    b.Navigation("Licenses");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductOwner", b =>
                {
                    b.Navigation("OwnedProducts");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
