// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TechMastery.MarketPlace.Persistence;

#nullable disable

namespace TechMastery.MarketPlace.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240327200453_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProductProductTag", b =>
                {
                    b.Property<Guid>("ProductListingsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsTagId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductListingsId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("ProductProductTag");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ArchivedOutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ArchivedOutboxMessages");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b4ef115-c58b-49ab-bc68-05fe2e7eb586"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 992, DateTimeKind.Utc).AddTicks(3350),
                            Name = "Web"
                        },
                        new
                        {
                            Id = new Guid("25167eea-d0a1-4642-9f02-8d29b1e5531c"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 992, DateTimeKind.Utc).AddTicks(3360),
                            Name = "Devops"
                        },
                        new
                        {
                            Id = new Guid("b2e65058-8ca3-4848-9a5c-99037addc804"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 992, DateTimeKind.Utc).AddTicks(3360),
                            Name = "AI/ML"
                        });
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Contribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContributorId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SharePercentage")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ContributorId");

                    b.HasIndex("ProductId");

                    b.ToTable("Contributions");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Contributor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Framework", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Frameworks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3865618-5efc-404d-adf2-02f467998492"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 992, DateTimeKind.Utc).AddTicks(3200),
                            Name = ".NET Core",
                            Version = "3.1"
                        },
                        new
                        {
                            Id = new Guid("e082bfc7-946c-4203-9655-cf91ef7b22a1"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 992, DateTimeKind.Utc).AddTicks(3200),
                            Name = "React",
                            Version = "16.13.1"
                        });
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7233be19-5a9c-449f-9701-fbd50b78db53"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 992, DateTimeKind.Utc).AddTicks(3080),
                            Name = "C#",
                            Version = ""
                        },
                        new
                        {
                            Id = new Guid("6b980fad-c7b5-4768-80d6-af693d30b345"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 992, DateTimeKind.Utc).AddTicks(3080),
                            Name = "JavaScript",
                            Version = ""
                        });
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuyerUsername")
                        .HasColumnType("text");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderEmail")
                        .HasColumnType("text");

                    b.Property<bool>("OrderPaid")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.OrderLineItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderLineItems");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentProviderId")
                        .HasColumnType("text");

                    b.Property<Guid>("SaleTransactionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.PaymentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusEnum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6af28a0-e425-477c-8f4e-02a305acf9fc"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 992, DateTimeKind.Utc).AddTicks(2860),
                            Name = "Pending",
                            StatusEnum = 0
                        },
                        new
                        {
                            Id = new Guid("2a714d14-221a-4409-bd98-92ef99d91507"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 992, DateTimeKind.Utc).AddTicks(2920),
                            Name = "Completed",
                            StatusEnum = 0
                        },
                        new
                        {
                            Id = new Guid("361b968b-66c8-4195-8126-a63f9924f6d9"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 992, DateTimeKind.Utc).AddTicks(2930),
                            Name = "Failed",
                            StatusEnum = 0
                        },
                        new
                        {
                            Id = new Guid("9e126f0a-c47f-40c3-adc0-fd5cf32d83fc"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 992, DateTimeKind.Utc).AddTicks(2930),
                            Name = "Refunded",
                            StatusEnum = 0
                        },
                        new
                        {
                            Id = new Guid("d90ed3fd-9574-416f-9379-8ddf3a627aa3"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 992, DateTimeKind.Utc).AddTicks(2930),
                            Name = "Disputed",
                            StatusEnum = 0
                        },
                        new
                        {
                            Id = new Guid("5fbec092-4525-4d46-824a-52f9cf5a9206"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 992, DateTimeKind.Utc).AddTicks(2940),
                            Name = "Successful",
                            StatusEnum = 0
                        });
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("17430e7d-9db7-4b61-adeb-8d763a683a26"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 992, DateTimeKind.Utc).AddTicks(3300),
                            Name = "Windows",
                            Version = ""
                        },
                        new
                        {
                            Id = new Guid("76de0e98-10fa-4903-95fc-4af610a2e6db"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 992, DateTimeKind.Utc).AddTicks(3300),
                            Name = "Linux",
                            Version = ""
                        });
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DemoURL")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductArtifact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ArtifactType")
                        .HasColumnType("integer");

                    b.Property<string>("BlobUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DownloadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsMarkedForDeletion")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductArtifacts");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductArtifactDownloadHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DownloadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DownloadedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductArtifactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductListingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductArtifactId");

                    b.HasIndex("ProductListingId");

                    b.ToTable("ProductDownloadHistory");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductFramework", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FrameworkId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductId", "FrameworkId");

                    b.HasIndex("FrameworkId");

                    b.ToTable("ProductFrameworks");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductLanguage", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ProductLanguages");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductLicenses");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductPlatform", b =>
                {
                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("ProductPlatforms");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductReview", b =>
                {
                    b.Property<Guid>("ProductReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewerUsername")
                        .HasColumnType("text");

                    b.HasKey("ProductReviewId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusEnum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProductStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1beaac76-5e45-43a0-9cc7-49df2e80fcc3"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 991, DateTimeKind.Utc).AddTicks(3430),
                            Name = "NewlyListed",
                            StatusEnum = 0
                        },
                        new
                        {
                            Id = new Guid("0ee20767-3857-4521-ae96-62143061aaa1"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 991, DateTimeKind.Utc).AddTicks(3490),
                            Name = "InReview",
                            StatusEnum = 0
                        },
                        new
                        {
                            Id = new Guid("892cb0bc-c75c-428b-a5d9-31778b5bc50b"),
                            CreatedDate = new DateTime(2024, 3, 27, 20, 4, 52, 991, DateTimeKind.Utc).AddTicks(3500),
                            Name = "ReadyForSale",
                            StatusEnum = 0
                        });
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductTag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("TagId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.SaleTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId1");

                    b.ToTable("SaleTransactions");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("ProductProductTag", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductListingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.ProductTag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.ShoppingCart", null)
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Category", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Contribution", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Contributor", "Contributor")
                        .WithMany("Contributions")
                        .HasForeignKey("ContributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany("Contributions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contributor");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Order", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", null)
                        .WithMany("Orders")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.OrderLineItem", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Order", null)
                        .WithMany("OrderLineItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Product", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductArtifact", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", null)
                        .WithMany("Artifacts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductArtifactDownloadHistory", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.ProductArtifact", "ProductArtifact")
                        .WithMany()
                        .HasForeignKey("ProductArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "ProductListing")
                        .WithMany("Downloads")
                        .HasForeignKey("ProductListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductArtifact");

                    b.Navigation("ProductListing");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductFramework", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Framework", "Framework")
                        .WithMany()
                        .HasForeignKey("FrameworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany("ProductFrameworks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Framework");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductLanguage", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany("ProductLanguages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductLicense", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", null)
                        .WithMany("Licenses")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductPlatform", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany("ProductPlatforms")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ProductReview", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.SaleTransaction", b =>
                {
                    b.HasOne("TechMastery.MarketPlace.Domain.Entities.Product", null)
                        .WithMany("Sales")
                        .HasForeignKey("ProductId1");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Contributor", b =>
                {
                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderLineItems");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.Product", b =>
                {
                    b.Navigation("Artifacts");

                    b.Navigation("Contributions");

                    b.Navigation("Downloads");

                    b.Navigation("Licenses");

                    b.Navigation("Orders");

                    b.Navigation("ProductFrameworks");

                    b.Navigation("ProductLanguages");

                    b.Navigation("ProductPlatforms");

                    b.Navigation("Reviews");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("TechMastery.MarketPlace.Domain.Entities.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
